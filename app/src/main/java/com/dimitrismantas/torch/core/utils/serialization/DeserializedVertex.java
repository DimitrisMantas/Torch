/*
 * Torch is a model, open-source Android application for optimal routing
 * in offline mobile devices.
 * Copyright (C) 2021-2022  DIMITRIS(.)MANTAS(@outlook.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package com.dimitrismantas.torch.core.utils.serialization;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DeserializedVertex extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static DeserializedVertex getRootAsDeserializedVertex(ByteBuffer _bb) { return getRootAsDeserializedVertex(_bb, new DeserializedVertex()); }
  public static DeserializedVertex getRootAsDeserializedVertex(ByteBuffer _bb, DeserializedVertex obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DeserializedVertex __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int lbl() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateLbl(int lbl) { int o = __offset(4); if (o != 0) { bb.putInt(o + bb_pos, lbl); return true; } else { return false; } }
  public float lat() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean mutateLat(float lat) { int o = __offset(6); if (o != 0) { bb.putFloat(o + bb_pos, lat); return true; } else { return false; } }
  public float lon() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean mutateLon(float lon) { int o = __offset(8); if (o != 0) { bb.putFloat(o + bb_pos, lon); return true; } else { return false; } }
  public short numInitialized() { int o = __offset(10); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public boolean mutateNumInitialized(short num_initialized) { int o = __offset(10); if (o != 0) { bb.putShort(o + bb_pos, num_initialized); return true; } else { return false; } }
  public int actualCostFromSource() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateActualCostFromSource(int actual_cost_from_source) { int o = __offset(12); if (o != 0) { bb.putInt(o + bb_pos, actual_cost_from_source); return true; } else { return false; } }
  public int predecessorLabel() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : -1; }
  public boolean mutatePredecessorLabel(int predecessor_label) { int o = __offset(14); if (o != 0) { bb.putInt(o + bb_pos, predecessor_label); return true; } else { return false; } }
  public DeserializedEdge outgoingEdges(int j) { return outgoingEdges(new DeserializedEdge(), j); }
  public DeserializedEdge outgoingEdges(DeserializedEdge obj, int j) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int outgoingEdgesLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public DeserializedEdge.Vector outgoingEdgesVector() { return outgoingEdgesVector(new DeserializedEdge.Vector()); }
  public DeserializedEdge.Vector outgoingEdgesVector(DeserializedEdge.Vector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createDeserializedVertex(FlatBufferBuilder builder,
      int lbl,
      float lat,
      float lon,
      short numInitialized,
      int actualCostFromSource,
      int predecessorLabel,
      int outgoingEdgesOffset) {
    builder.startTable(7);
    DeserializedVertex.addOutgoingEdges(builder, outgoingEdgesOffset);
    DeserializedVertex.addPredecessorLabel(builder, predecessorLabel);
    DeserializedVertex.addActualCostFromSource(builder, actualCostFromSource);
    DeserializedVertex.addLon(builder, lon);
    DeserializedVertex.addLat(builder, lat);
    DeserializedVertex.addLbl(builder, lbl);
    DeserializedVertex.addNumInitialized(builder, numInitialized);
    return DeserializedVertex.endDeserializedVertex(builder);
  }

  public static void startDeserializedVertex(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addLbl(FlatBufferBuilder builder, int lbl) { builder.addInt(0, lbl, 0); }
  public static void addLat(FlatBufferBuilder builder, float lat) { builder.addFloat(1, lat, 0.0f); }
  public static void addLon(FlatBufferBuilder builder, float lon) { builder.addFloat(2, lon, 0.0f); }
  public static void addNumInitialized(FlatBufferBuilder builder, short numInitialized) { builder.addShort(3, numInitialized, 0); }
  public static void addActualCostFromSource(FlatBufferBuilder builder, int actualCostFromSource) { builder.addInt(4, actualCostFromSource, 0); }
  public static void addPredecessorLabel(FlatBufferBuilder builder, int predecessorLabel) { builder.addInt(5, predecessorLabel, -1); }
  public static void addOutgoingEdges(FlatBufferBuilder builder, int outgoingEdgesOffset) { builder.addOffset(6, outgoingEdgesOffset, 0); }
  public static int createOutgoingEdgesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOutgoingEdgesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDeserializedVertex(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDeserializedVertexBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedDeserializedVertexBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DeserializedVertex get(int j) { return get(new DeserializedVertex(), j); }
    public DeserializedVertex get(DeserializedVertex obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

